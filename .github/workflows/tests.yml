# Inspired by http://3bb.cc/blog/2020/09/11/github-ci/.
name: Tests

# We tell GitHub to not duplicate the checks in pull requests.  See
# https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662/15
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, closed ]

jobs:
  test:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix:
        # Use ccl-bin/1.12.1 instead of 'ccl' because of
        # https://github.com/roswell/roswell/issues/534.
        # TODO: Revert when Roswell is functional again.
        lisp: [sbcl-bin, ccl-bin/1.12.1, ecl/21.2.1]
        rosargs: [dynamic-space-size=3072]
        os: [ubuntu-latest, macos-latest] # try windows-latest when we understand commands to install Roswell on it

    # run the job on every combination of "lisp" and "os" above
    runs-on: ${{ matrix.os }}

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-
          ${{ runner.os }}-dot-roswell-

    - name: Install Roswell
      shell: bash
      # always run install, since it does some global installs and setup that isn't cached
      env:
       LISP: ${{ matrix.lisp }}
      # TODO: Update Roswell to latest version (may need Ubuntu 20.* or above).
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/v20.06.14.107/scripts/install-for-ci.sh | sh -x

    - name: Check Lisp
      continue-on-error: true
      shell: bash
      run: |
        ros ${{ matrix.rosargs }} -e '(format t "~&~a: ~a on ~a~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        ros ${{ matrix.rosargs }} -e '(format t "ASDF: ~a~%" (asdf:asdf-version))'
        ros ${{ matrix.rosargs }} -e '(format t "fixnum bits: ~a~%" (integer-length most-positive-fixnum))'
        ros ${{ matrix.rosargs }} -e '(format t "features: ~s~%" *features*)'

    - name: Register current checkout path in ASDF
      shell: bash
      run: |
        mkdir -p ~/.config/common-lisp/source-registry.conf.d/
        echo "(:tree \"$PWD\")" > ~/.config/common-lisp/source-registry.conf.d/asdf.conf

    - name: Fetch Common Lisp third-party dependencies
      shell: bash
      run: |
        ros ${{ matrix.rosargs }} -e '(handler-bind ((error (lambda (a) (uiop:print-backtrace) (format *error-output* "Error: ~a~&" a) (uiop:quit 17)))) (asdf:load-system :nhooks/submodules))'
        mkdir -p ~/.config/common-lisp/source-registry.conf.d/
        echo "(:tree \"$PWD/_build/submodules\")" >> ~/.config/common-lisp/source-registry.conf.d/asdf.conf

    - name: Load the system
      shell: bash
      run: |
        # TODO: Can we make CCL backtraces more readable?  With trivial-backtrace maybe?
        ros ${{ matrix.rosargs }} -e '(asdf:load-system :nhooks/submodules)' -e '(handler-bind ((error (lambda (a) (uiop:print-condition-backtrace a) (format *error-output* "Error: ~a~&" a) (uiop:quit 17)))) (asdf:load-system :nhooks))'

    # Load tests separately to not clutter the test output.
    - name: Load tests
      shell: bash
      run: |
        ros ${{ matrix.rosargs }} -e '(asdf:load-system :nhooks/submodules)' -e  '(handler-bind ((error (lambda (a) (uiop:print-backtrace) (format *error-output* "~a~&" a) (uiop:quit 17)))) (asdf:load-system :nhooks/tests))'

    - name: Run tests
      shell: bash
      # Export CI to tell ASDF to quit on test errors.
      env:
       NASDF_TESTS_QUIT_ON_FAIL: yes
      run: |
        ros ${{ matrix.rosargs }} -e '(asdf:load-system :nhooks/submodules)' -e '(asdf:test-system :nhooks)'
